"use strict";

/**
 * SGDevTools - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è SGModelView)
 * @version 1.1.2
 * @requires ES2025+ (ES16+)
 * @link https://github.com/sg2d/model.sg2d.ru
 * @license SGDevTools may be freely distributed under the MIT license
 * @copyright 2019-2025 ¬© –ö–∞–ª–∞—à–Ω–∏–∫–æ–≤ –ò–ª—å—è (https://model.sg2d.ru, sg2d@yandex.ru)
 * @extends SGModel
 */
class SGDevTools {

	static temp = null;

	static _init(SGModelView) {
		this.SGModelView = SGModelView;
		this.#fInstanceByElement();
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –ø–æ HTML-—ç–ª–µ–º–µ–Ω—Ç—É:
	 * 	–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É '~', –∞ –∑–∞—Ç–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ –ª—é–±–æ–º—É HTML-—ç–ª–µ–º–µ–Ω—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
	 *	—Ç–æ –≤ –∫–æ–Ω—Å–æ–ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± SGModelView-–∏–Ω—Å—Ç–∞–Ω—Å–µ,
	 * 	–≤–æ –≤—å—é—Ö–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–π HTML-—ç–ª–µ–º–µ–Ω—Ç, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –≤—Å–µ—Ö sg-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö –≤ HTML-—ç–ª–µ–º–µ–Ω—Ç–µ.
	 * 	P.S: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –≤ SGModelView.__instances, –∫–æ—Ä–Ω–µ–≤–æ–π HTML-—ç–ª–µ–º–µ–Ω—Ç –≤—å—é—Ö–∏ - this.$view
	 */
	static #fInstanceByElement() {
		let debugMode = false;
		let debugTimeout = null;
		const handleKeyDown = (event) => {
			if (event.altKey && event.code === 'Backquote') {
				debugMode = true;
				console.debug('üîç SGModelView Debug Mode: You pressed Alt + ` (~). Now click left mouse button on any HTML element within 5 seconds');
				if (debugTimeout) {
					clearTimeout(debugTimeout);
				}
				debugTimeout = setTimeout(() => {
					debugMode = false;
					console.debug('	|- ‚è∞ SGModelView Debug Mode: Time expired');
				}, 5000);
				
				event.preventDefault();
			}
		};
		const handleClick = (event) => {
			if (!debugMode) return;
			event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã)
			event.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
			event.stopImmediatePropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —ç—Ç–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
			debugMode = false;
			if (debugTimeout) {
				clearTimeout(debugTimeout);
				debugTimeout = null;
			}
			const clickedElement = event.target;
			let foundInstance = null;
			let foundSGAttributes = {};
			for (const [attrName,] of Object.entries(this.SGModelView.ATTRIBUTES)) {
				const value = clickedElement.getAttribute(attrName);
				if (value) {
					foundSGAttributes[attrName] = value;
				}
			}
			let currentElement = clickedElement;
			while (currentElement && currentElement !== document.body) {
				const sgModelUUID = this.SGModelView.getElementUUID(currentElement);
				if (sgModelUUID) {
					foundInstance = this.SGModelView.__instances[sgModelUUID];
					break;
				}
				currentElement = currentElement.parentElement;
			}
			if (foundInstance) {
				this.temp = foundInstance;
				console.group('üìã SGModelView Debug Info');
				console.debug('üéØ Clicked element:', clickedElement);
				console.debug(`üè∑Ô∏è Class: ${foundInstance.constructor.name}, UUID=${foundInstance.uuid}, __uid=${foundInstance.__uid}`);
				console.debug('üå≥ Root view element:', foundInstance.$view);
				if (Object.keys(foundSGAttributes).length > 0) {
					console.debug('üè∑Ô∏è SG attributes of element:', foundSGAttributes);
				} else {
					console.debug('‚ùå SG attributes: none');
				}
				console.debug('üíæ Instance data:', foundInstance.getData());
				console.debug('üîß Instance:', foundInstance);
				console.debug('üí° SGModelView.dev.temp contains a reference to the found SGModelView instance');
				console.groupEnd();
			} else {
				this.temp = null;
				console.debug('‚ùå SGModelView Debug: Element ' + clickedElement + ' does not belong to any SGModelView instance');
				if (Object.keys(foundSGAttributes).length > 0) {
					console.debug('üè∑Ô∏è Found SG attributes:', foundSGAttributes);
				}
			}
		};
		if (typeof document !== 'undefined') {
			document.addEventListener('keydown', handleKeyDown);
			document.addEventListener('click', handleClick, { capture: true }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capture=true —á—Ç–æ–±—ã handleClick –≤ Capture Phase (—Ñ–∞–∑–∞ –∑–∞—Ö–≤–∞—Ç–∞ - —Å–æ–±—ã—Ç–∏–µ —Å–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç –∫–æ—Ä–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ —Ü–µ–ª–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É, —Ñ–∞–∑–∞ –≤—Å–ø–ª—ã—Ç–∏—è (Bubble Phase) - —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –∫–æ—Ä–Ω—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é))
		}
		console.debug(`Activate temporary debug mode: Press Alt + '~' (backtick), you will have 5 seconds to click on any HTML element.`);
	}
}

export default SGDevTools;
